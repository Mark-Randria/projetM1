// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id         Int     @id @default(autoincrement())
  nom        String
  prenom     String
  email      String  @unique
  motdepasse String
  isAdmin    Boolean @default(false)

  Article            Article[]
  UtilisateurArticle UtilisateurArticle[]
  Critique           Critique[]
}

model UtilisateurArticle {
  utilisateurId Int
  articleId     Int
  role          Role

  utilisateur Utilisateur @relation(fields: [utilisateurId], references: [id])
  article     Article     @relation(fields: [articleId], references: [id])

  @@id([utilisateurId, articleId])
  @@index([articleId, role])
}

model Critique {
  id                  Int         @id @default(autoincrement())
  datePubCritique     DateTime    @default(now())
  reviewerId          Int
  reviewer            Utilisateur @relation(fields: [reviewerId], references: [id])
  articleId           Int
  titreCritique       String
  descriptionCritique String
  Article             Article     @relation(fields: [articleId], references: [id])
}

model Article {
  id                 Int                  @id @default(autoincrement())
  titreArticle       String
  contenu            String
  status             Status               @default(PENDING)
  archive            Boolean              @default(false)
  datePubArticle     DateTime             @default(now())
  critiques          Critique[]
  auteurId           Int
  auteur             Utilisateur          @relation(fields: [auteurId], references: [id])
  UtilisateurArticle UtilisateurArticle[]
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  AUTEUR
  REVIEWER
}
